create table client
(
    id           integer generated by default as identity primary key,
    username     varchar(100) unique ,
    email        varchar(100),
    phone_number varchar(12) not null,
    role         varchar(100) check(role in('ADMIN', 'USER', 'AUTHUSER', 'AUTHOR')),
    password     varchar(100),
    image        varchar(500)
);

create table album
(
    id           integer generated by default as identity primary key,
    name         varchar(100),
    countofplays integer,
    rating       integer,
    countofmusic integer,
    status       varchar(100) check(status in('PUBLISH', 'PRIVATE')),
    image_uri    varchar(500)
);

create table music
(
    id           integer generated by default as identity primary key,
    name         varchar(100),
    rating       integer,
    countofplays integer,
    album_id     integer references album (id) on delete cascade,
    image_uri    varchar(500) unique,
    audio_uri    varchar(500) unique
);

create table author_album
(
    id        integer generated by default as identity primary key,
    album_id  integer references album (id) on delete cascade,
    author_id integer references client (id) on delete cascade
);

create table author_music
(
    id        integer generated by default as identity primary key,
    music_id  integer references music (id) on delete cascade,
    author_id integer references client (id) on delete cascade
);

create table review(
    id          integer generated by default as identity primary key,
    Rating      integer,
    Description varchar(4000),
    Client_id   integer,
    Music_id    integer
);


select * from client;

SELECT album.id, album.name, album.countofplays, album.rating, album.countofmusic, album.status, album.image_uri FROM album JOIN author_album ON album.id = author_album.album_id JOIN client ON author_album.author_id = client.id WHERE client.role = 'AUTHOR';

SELECT
    album.id AS album_id,
    album.name AS album_name,
    album.countofplays,
    album.rating,
    album.countofmusic,
    album.status,
    album.image_uri,
    client.username AS author_username
FROM
    album
        JOIN
    author_album ON album.id = author_album.album_id
        JOIN
    client ON author_album.author_id = client.id;

select * from music;

select * from client;

SELECT music.id, client.username, music.name, music.rating, music.countofplays, music.album_id, music.image_uri, music.audio_uri FROM music JOIN author_music ON music.id = author_music.music_id JOIN client ON author_music.author_id = client.id WHERE client.role = 'AUTHOR'

select * from author_music;

select * from album;

insert into author_music (music_id, author_id) VALUES (4, 2);


SELECT music.id, client.username, music.name, music.rating, music.countofplays, music.album_id, music.image_uri, music.audio_uri FROM music JOIN author_music ON music.id = author_music.music_id JOIN client ON author_music.author_id = client.id WHERE client.role = 'AUTHOR' AND album_id = 4;